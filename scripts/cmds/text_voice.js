const axios = require("axios");
const fs = require("fs");
const path = require("path");

module.exports = {
  config: {
    name: "text_voice",
    version: "1.0",
    role: 0,
    author: "ùôºùöòùöëùöäùöñùöñùöäùöç ùô∞ùöîùöäùöúùöë",
    shortDescription: "‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶¶‡¶ø‡¶≤‡ßá ‡¶ï‡¶ø‡¶â‡¶ü ‡¶Æ‡ßá‡¶Ø‡¶º‡ßá‡¶∞ ‡¶≠‡ßü‡ßá‡¶∏ ‡¶™‡ßç‡¶≤‡ßá ‡¶ï‡¶∞‡¶¨‡ßá üòç",
    longDescription: "‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶≤‡¶ø‡¶ñ‡¶≤‡ßá ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶≠‡ßü‡ßá‡¶∏ ‡¶™‡¶æ‡¶†‡¶æ‡¶¨‡ßá (‡¶á‡¶Æ‡ßã‡¶ú‡¶ø ‡¶õ‡¶æ‡ßú‡¶æ)‡•§",
    category: "noprefix",
  },

  // ‚úÖ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶Ö‡¶°‡¶ø‡¶ì URL ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü
  handleEvent: async function ({ api, event }) {
    const { threadID, messageID, body } = event;
    if (!body) return;

    const textAudioMap = {
      "i love you": "https://files.catbox.moe/npy7kl.mp3",
      "mata beta": "https://files.catbox.moe/5rdtc6.mp3",
      "hi": "https://files.catbox.moe/etjgf5.mp3",
      "hello": "https://files.catbox.moe/bz1u2y.mp3"
      // ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶∞‡ßã ‡¶≠‡ßü‡ßá‡¶∏ ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã
    };

    const key = body.trim().toLowerCase();
    const audioUrl = textAudioMap[key];
    if (!audioUrl) return; // ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶®‡¶æ ‡¶Æ‡ßá‡¶≤‡¶≤‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ

    const cacheDir = path.join(__dirname, "cache");
    if (!fs.existsSync(cacheDir)) fs.mkdirSync(cacheDir);

    const filePath = path.join(cacheDir, `${encodeURIComponent(key)}.mp3`);

    try {
      const response = await axios({
        method: "GET",
        url: audioUrl,
        responseType: "stream"
      });

      const writer = fs.createWriteStream(filePath);
      response.data.pipe(writer);

      writer.on("finish", () => {
        api.sendMessage(
          {
            attachment: fs.createReadStream(filePath)
          },
          threadID,
          () => {
            fs.unlink(filePath, err => {
              if (err) console.error("Error deleting file:", err);
            });
          },
          messageID
        );
      });

      writer.on("error", err => {
        console.error("Error writing file:", err);
        api.sendMessage("‚ùå ‡¶≠‡ßü‡ßá‡¶∏ ‡¶™‡ßç‡¶≤‡ßá ‡¶π‡ßü‡¶®‡¶ø üòÖ", threadID, messageID);
      });
    } catch (error) {
      console.error("Error downloading audio:", error);
      api.sendMessage("‚ö†Ô∏è ‡¶≠‡ßü‡ßá‡¶∏ ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!", threadID, messageID);
    }
  },

  onStart: () => {} // ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶Æ‡ßã‡¶°‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≤‡¶æ‡¶ó‡ßá ‡¶®‡¶æ
};
